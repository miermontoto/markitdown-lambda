service: "markdown-converter"
frameworkVersion: "4"
useDotenv: true

provider:
  name: aws
  runtime: ${env:AWS_RUNTIME, 'python3.12'}
  architecture: ${env:AWS_ARCH, 'x86_64'}
  stage: prod
  region: ${env:AWS_MAIN_REGION, 'eu-west-1'}
  memorySize: ${env:AWS_MEMORY_SIZE, 1024}
  timeout: ${env:AWS_TIMEOUT_IN_SECS, 29}
  httpApi:
    cors:
      allowedOrigins:
        - "*"
      allowedHeaders:
        - Content-Type
      allowedMethods:
        - POST
        - OPTIONS
  environment:
    APP_NAME: ${env:APP_NAME, 'markdown-converter'}
    APP_VERSION: ${env:APP_VERSION, '1.0.0'}
    PYTHONPATH: "/opt/python"
    INPUT_BUCKET: ${self:custom.bucketName}
    OUTPUT_BUCKET: ${self:custom.bucketName}
    API_KEY: ${env:API_KEY, ''}
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
          Resource:
            - "arn:aws:s3:::${self:custom.bucketName}/*"
            - "arn:aws:s3:::${self:custom.bucketName}"
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
          Resource:
            - "arn:aws:secretsmanager:${self:provider.region}:*:secret:markdown-converter/${self:provider.stage}/*"
  layers:
    - Ref: PythonRequirementsLambdaLayer

package:
  individually: false
  patterns:
    - "!./**"
    - "src/**/*.py"
    - requirements.txt

plugins:
  - serverless-python-requirements
  - serverless-dotenv-plugin
  - serverless-domain-manager

custom:
  basePath: ${env:BASE_PATH, ''}
  bucketName: markitdown-${self:provider.stage}
  pythonRequirements:
    dockerizePip: true
    layer: true
    slim: true
    strip: false
    pipCmdExtraArgs:
      - --no-cache-dir
  dotenv:
    logging: false
  customDomain:
    domainName: ${env:CUSTOM_SUBDOMAIN}.${env:CUSTOM_DOMAIN}
    certificateName: "*.${env:CUSTOM_DOMAIN}"
    createRoute53Record: true
    hostedZoneId: ${env:AWS_CUSTOM_DOMAIN_ZONE_ID}
    securityPolicy: tls_1_2
    apiType: http
    endpointType: regional

resources:
  Resources:
    InputOutputBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        LifecycleConfiguration:
          Rules:
            - Id: DeleteOldInputFiles
              Status: Enabled
              Prefix: input/
              ExpirationInDays: 1
            - Id: DeleteOldOutputFiles
              Status: Enabled
              Prefix: output/
              ExpirationInDays: 15

    SecretsManagerSecret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: markdown-converter/${self:provider.stage}/config
        Description: API key for markdown converter service
        GenerateSecretString:
          SecretStringTemplate: "{}"
          GenerateStringKey: "API_KEY"
          PasswordLength: 32
          ExcludeCharacters: ' "\\/@'

functions:
  markdownConverter:
    handler: src/handler.lambda_handler
    events:
      - httpApi:
          path: /convert
          method: POST
      - httpApi:
          path: /health
          method: GET
      - s3:
          bucket: ${self:custom.bucketName}
          event: s3:ObjectCreated:*
          existing: true
          rules:
            - prefix: input/
